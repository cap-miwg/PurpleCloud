{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases. Each script creates independent resources that don't depend on the others.","title":"Home"},{"location":"#overview","text":"Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases. Each script creates independent resources that don't depend on the others.","title":"Overview"},{"location":"cost/","text":"Cost Analysis Important Information As this tool spins up cloud resources, it will result in charges to your Azure account. Efforts have been made to minimize the costs incurred, but the tool author is not responsible for any charges or security issues that may result from usage of this tool. Be sure to tear down all resources when not using them. Cost Analysis / Pricing Estimate As this tool spins up cloud resources, it will result in charges to your Azure subscription. Efforts have been made to minimize the costs incurred and research the best options for most uses cases. The best way to use this is reference the estimated cost below, check your Azure costs daily, and verify them against this information included below. Be sure to tear down all resources when not using them. There are other small costs associated with Azure cloud resources, but the most expensive resources by far are the Azure Virtual Machines. When it comes to Compute VM resources, Azure is more expensive than AWS. If you are looking to run this range in AWS, check out the sister project, BlueCloud: https://github.com/iknowjason/BlueCloud By default, both the Windows 10 Pro and Domain Controller are using a Standard_D2as_v4 instance size, which is the lowest cost hardware that I could find which will provide sufficient performance. The Hunting ELK SIEM system requires a scaled up Linux instance size of Standard_D4s_v3 . This is because it uses HELK install option four for data science capabilities. Reference the Azure \"Windows Virtual Machine Pricing\" for the most up to date pricing: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/ Reference the Azure \"Linux Virtual Machines Pricing\" for the most up to date pricing on the Linux VM: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/ Here are the defaults I've researched for this range. Each Windows and Linux VM should approximately accrue the following with range defaults: Table: Azure Accrued Costs per VM with Windows License Included System Default Size Default Region 1 day cost 7 day cost 30 day cost Win10Pro Standard_D2as_v4 US East $2.30 $16.10 $70.08 DC Standard_D2as_v4 US East $2.30 $16.10 $70.08 HELK Standard_D4s_v3 US East $4.60 $32.26 $140.16 Changing Default VM Instance Size in ad.py To change the default hardware instance sizes for each VM, modify the following variables in ad.py: # The instance size for each system size_win10 = \"Standard_D2as_v4\" size_dc = \"Standard_D2as_v4\" # Note: Hunting ELK install options #4 requires 8 GB available memory size_helk = \"Standard_D4s_v3\"","title":"Cost"},{"location":"cost/#cost-analysis","text":"","title":"Cost Analysis"},{"location":"cost/#important-information","text":"As this tool spins up cloud resources, it will result in charges to your Azure account. Efforts have been made to minimize the costs incurred, but the tool author is not responsible for any charges or security issues that may result from usage of this tool. Be sure to tear down all resources when not using them.","title":"Important Information"},{"location":"cost/#cost-analysis-pricing-estimate","text":"As this tool spins up cloud resources, it will result in charges to your Azure subscription. Efforts have been made to minimize the costs incurred and research the best options for most uses cases. The best way to use this is reference the estimated cost below, check your Azure costs daily, and verify them against this information included below. Be sure to tear down all resources when not using them. There are other small costs associated with Azure cloud resources, but the most expensive resources by far are the Azure Virtual Machines. When it comes to Compute VM resources, Azure is more expensive than AWS. If you are looking to run this range in AWS, check out the sister project, BlueCloud: https://github.com/iknowjason/BlueCloud By default, both the Windows 10 Pro and Domain Controller are using a Standard_D2as_v4 instance size, which is the lowest cost hardware that I could find which will provide sufficient performance. The Hunting ELK SIEM system requires a scaled up Linux instance size of Standard_D4s_v3 . This is because it uses HELK install option four for data science capabilities. Reference the Azure \"Windows Virtual Machine Pricing\" for the most up to date pricing: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/ Reference the Azure \"Linux Virtual Machines Pricing\" for the most up to date pricing on the Linux VM: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/ Here are the defaults I've researched for this range. Each Windows and Linux VM should approximately accrue the following with range defaults:","title":"Cost Analysis / Pricing Estimate"},{"location":"cost/#table-azure-accrued-costs-per-vm-with-windows-license-included","text":"System Default Size Default Region 1 day cost 7 day cost 30 day cost Win10Pro Standard_D2as_v4 US East $2.30 $16.10 $70.08 DC Standard_D2as_v4 US East $2.30 $16.10 $70.08 HELK Standard_D4s_v3 US East $4.60 $32.26 $140.16","title":"Table:  Azure Accrued Costs per VM with Windows License Included"},{"location":"cost/#changing-default-vm-instance-size-in-adpy","text":"To change the default hardware instance sizes for each VM, modify the following variables in ad.py: # The instance size for each system size_win10 = \"Standard_D2as_v4\" size_dc = \"Standard_D2as_v4\" # Note: Hunting ELK install options #4 requires 8 GB available memory size_helk = \"Standard_D4s_v3\"","title":"Changing Default VM Instance Size in ad.py"},{"location":"credits/","text":"Credits @ghostinthewires for his Terraform templates (https://github.com/ghostinthewires) @mosesrenegade for his Ansible Playbook integration with Terraform + Powershell script (https://github.com/mosesrenegade)","title":"Credits"},{"location":"credits/#credits","text":"@ghostinthewires for his Terraform templates (https://github.com/ghostinthewires) @mosesrenegade for his Ansible Playbook integration with Terraform + Powershell script (https://github.com/mosesrenegade)","title":"Credits"},{"location":"future/","text":"Future Ideas for Consideration Azure Web App for Containers setup with a Juice Shop deployment","title":"Roadmap Ideas"},{"location":"future/#future-ideas-for-consideration","text":"Azure Web App for Containers setup with a Juice Shop deployment","title":"Future Ideas for Consideration"},{"location":"install/","text":"Installation Note: Tested on Ubuntu Linux 20.04 Pre-Requisites Python: Tested version: 3.8.10 Terraform: Tested version: 1.2.8 Azure tenant with subscription Global Administrator role Important Security Information: Security Groups Some people might be concerned about publicly exposing these cloud resources. The ad.py script will auto-detect your source IP address and white list only that IP address. The managed_identity.py script has a variable called src_ip which you can manually edit for your source IP address. Step 1: Clone Clone this repository Step 2: Install python faker Install the python faker using pip. This is a dependency of some python scripts to generate users. Faker is required for the following three scripts: azure_ad.py, ad.py, managed_identity.py. $ pip3 install faker Step 3: Environment Setup Set up your environment to use Terraform There are two ways to set up your environment in order to run terraform. Option 1: az login as Global Administrator Install the az cli tool. Type az login and follow the prompts to authenticate as a Global Administrator. This is the fastest way. Option 2: Create an Azure Service Principal Creating an Azure Service Principal and assigning it permissions is educational, but slower. After you have a valid Azure subscription, create an Azure Service Principal with the correct permissions and add the four environment variables to your local shell using .env or .envrc: export ARM_SUBSCRIPTION_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_TENANT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_SECRET=\"YOUR_SERVICE_PRINCIPAL_VALUES\" Here are some references for creating a Service Principal to use with Azure. Creating a Service Principal https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret Configuring a Service Principal to manage Azure Active Directory https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/guides/service_principal_configuration Microsoft docs: Creating a Service Principal in Cloud Shell with Bash https://docs.microsoft.com/en-us/azure/developer/terraform/get-started-cloud-shell-bash?tabs=bash These are the settings that have worked best. For Azure AD, set up the Service Principal as Global Administrator and assign the following Graph API permissions: Application.ReadWrite.All User.ReadWrite.All Group.ReadWrite.All For building the Azure infrastructure resources, assigning the Service Principal a role of Owner can help as well. Step 4: Generate Terraform Run one of the PurpleCloud scripts to generate terraform. Each generator lives in a separate directory. See the usage section for examples. Step 5: Run Terraform Run terraform terraform init terraform plan run.plan terraform apply run.plan Destroying the Range Destroy the range resources when you are finished: terraform destroy","title":"Installation"},{"location":"install/#installation","text":"Note: Tested on Ubuntu Linux 20.04","title":"Installation"},{"location":"install/#pre-requisites","text":"Python: Tested version: 3.8.10 Terraform: Tested version: 1.2.8 Azure tenant with subscription Global Administrator role","title":"Pre-Requisites"},{"location":"install/#important-security-information-security-groups","text":"Some people might be concerned about publicly exposing these cloud resources. The ad.py script will auto-detect your source IP address and white list only that IP address. The managed_identity.py script has a variable called src_ip which you can manually edit for your source IP address.","title":"Important Security Information:  Security Groups"},{"location":"install/#step-1-clone","text":"Clone this repository","title":"Step 1: Clone"},{"location":"install/#step-2-install-python-faker","text":"Install the python faker using pip. This is a dependency of some python scripts to generate users. Faker is required for the following three scripts: azure_ad.py, ad.py, managed_identity.py. $ pip3 install faker","title":"Step 2: Install python faker"},{"location":"install/#step-3-environment-setup","text":"Set up your environment to use Terraform There are two ways to set up your environment in order to run terraform.","title":"Step 3: Environment Setup"},{"location":"install/#option-1-az-login-as-global-administrator","text":"Install the az cli tool. Type az login and follow the prompts to authenticate as a Global Administrator. This is the fastest way.","title":"Option 1:  az login as Global Administrator"},{"location":"install/#option-2-create-an-azure-service-principal","text":"Creating an Azure Service Principal and assigning it permissions is educational, but slower. After you have a valid Azure subscription, create an Azure Service Principal with the correct permissions and add the four environment variables to your local shell using .env or .envrc: export ARM_SUBSCRIPTION_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_TENANT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_SECRET=\"YOUR_SERVICE_PRINCIPAL_VALUES\" Here are some references for creating a Service Principal to use with Azure. Creating a Service Principal https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret Configuring a Service Principal to manage Azure Active Directory https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/guides/service_principal_configuration Microsoft docs: Creating a Service Principal in Cloud Shell with Bash https://docs.microsoft.com/en-us/azure/developer/terraform/get-started-cloud-shell-bash?tabs=bash These are the settings that have worked best. For Azure AD, set up the Service Principal as Global Administrator and assign the following Graph API permissions: Application.ReadWrite.All User.ReadWrite.All Group.ReadWrite.All For building the Azure infrastructure resources, assigning the Service Principal a role of Owner can help as well.","title":"Option 2:  Create an Azure Service Principal"},{"location":"install/#step-4-generate-terraform","text":"Run one of the PurpleCloud scripts to generate terraform. Each generator lives in a separate directory. See the usage section for examples.","title":"Step 4: Generate Terraform"},{"location":"install/#step-5-run-terraform","text":"Run terraform terraform init terraform plan run.plan terraform apply run.plan","title":"Step 5: Run Terraform"},{"location":"install/#destroying-the-range","text":"Destroy the range resources when you are finished: terraform destroy","title":"Destroying the Range"},{"location":"overview/","text":"Overview Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases. Capabilities and Use Cases Hybrid Identity lab: Automatically create a simulated AD on-premise environment with configurable users plus an Azure AD environment with configurable users. Automatically place the latest Azure AD Connect installer on the DC's desktop. This can save security researchers a significant amount of time in building Hybrid Identity deployments. Detection Engineering + Purple Teaming: Security simulation lab to run attack and defense simulations against a realistic enterprise environment. Azure AD Lab: Security lab for learning Azure AD plus running simulations for Red and Blue teams. Active Directory lab: Simulate an on-premise AD environment using Azure VMs, for learning, training, and Red/Blue team simulations. Microsoft lab: Supports automated deployment of Azure Microsoft for learning, training, and attack/defense simulations. Azure Storage lab: Creates a deployment with Azure storage blobs, shares, files, and key vaults with secrets, keys, and certificates. Phishing App lab: Automatically deploy a multi-tenant phishing app for learning, training, and simulations of attack and defense. Azure AD features: Customizable Azure AD Domain Automatically deploy customizable number of randomly generated Azure AD users Build up to 7 Azure AD applications Build up to 11 Azure AD Groups Auto-assign Azure AD users into groups One optional privilege escalation abuse scenario included + attack scripts Active Directory features: Domain Join Windows 10 Customizable AD Domain Configurable number of windows 10 endpoints Command line parameters to randomly generate passwords or specify custom password Automatically log on Domain Users into Windows 10 endpoint with domain user creds Automatically add configurable number of AD users, groups, and OUs Import custom AD users, groups, and OUs from user supplied CSV Customizable Azure AD Connect MSI Detection Engineering, SIEM, DFIR: Sentinel: Support for Windows 10 Sentinel automated shipping of Sysmon and Windows Event Logs to Sentinel Velociraptor Live Response: Velociraptor 6.5.2: Server and endpoint instrumentation with internal PKI Hunting ELK automated server deployment and Windows 10 endpoint agent instrumentation to ship logs to server Customizable Winlogbeat version and configuration Sysmon 14: Fully customizable sysmon configuration and upgradeable to future Sysmon versions past v14 current support Tools azure_ad.py Generate the terraform for a custom Azure AD security lab. It uses a python library (faker) to generate as many Azure AD users as you desire, also creating AD Groups and AD Applications. Contains a vulnerable privilege escalation scenario that can be optionally enabled. ad.py Create an Active Directory on-premise environment simulated with Azure VMs. This script is used to generate a more traditional infrastructure range. It can create an Active Directory Domain Services range, generating as many AD users as you wish. It also supports many other features such as Domain Join of Windows 10 systems, in addition to a SIEM instrumented with Sysmon. sentinel.py Create a Microsoft Sentinel deployment configured in a log analytics workspace. Optionally configure Windows 10 to ship security and Sysmon logs to Sentinel. Optionally configure an Active Diretory environment with Domain Join. storage.py Create some Azure storage resources, including a storage account, containers, blobs, file shares with files, key vault with secrets, keys, and certificate. managed_identity.py Create an Azure managed identity attack lab with an Azure VM, a user or system assigned identity for the VM, and some storage and key vault resources to practice with. phishing_app.py Create a multi-tenant Azure AD application that can be used for app consent phishing simulations. You can specify a custom display name for the app along with custom redirect_uri, homepage_url, and logout_url. Use Cases Research and pentest lab for Azure AD Security testing of Hybrid Join and Azure AD Joined devices EDR Testing lab PoC / Product Security Lab Enterprise Active Directory lab with domain joined devices Malware / reverse engineering to study artifacts against domain joined devices SIEM / Threat Hunting / DFIR / Live Response lab with HELK + Velociraptor [1, 2] Log aggregator architecture to forward logs to a cloud native SIEM (Microsoft Sentinel) Data Science research with HELK server, Jupyter notebooks Detection Engineering research with Mordor [3, 4]","title":"Overview"},{"location":"overview/#overview","text":"Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases.","title":"Overview"},{"location":"overview/#capabilities-and-use-cases","text":"Hybrid Identity lab: Automatically create a simulated AD on-premise environment with configurable users plus an Azure AD environment with configurable users. Automatically place the latest Azure AD Connect installer on the DC's desktop. This can save security researchers a significant amount of time in building Hybrid Identity deployments. Detection Engineering + Purple Teaming: Security simulation lab to run attack and defense simulations against a realistic enterprise environment. Azure AD Lab: Security lab for learning Azure AD plus running simulations for Red and Blue teams. Active Directory lab: Simulate an on-premise AD environment using Azure VMs, for learning, training, and Red/Blue team simulations. Microsoft lab: Supports automated deployment of Azure Microsoft for learning, training, and attack/defense simulations. Azure Storage lab: Creates a deployment with Azure storage blobs, shares, files, and key vaults with secrets, keys, and certificates. Phishing App lab: Automatically deploy a multi-tenant phishing app for learning, training, and simulations of attack and defense. Azure AD features: Customizable Azure AD Domain Automatically deploy customizable number of randomly generated Azure AD users Build up to 7 Azure AD applications Build up to 11 Azure AD Groups Auto-assign Azure AD users into groups One optional privilege escalation abuse scenario included + attack scripts Active Directory features: Domain Join Windows 10 Customizable AD Domain Configurable number of windows 10 endpoints Command line parameters to randomly generate passwords or specify custom password Automatically log on Domain Users into Windows 10 endpoint with domain user creds Automatically add configurable number of AD users, groups, and OUs Import custom AD users, groups, and OUs from user supplied CSV Customizable Azure AD Connect MSI Detection Engineering, SIEM, DFIR: Sentinel: Support for Windows 10 Sentinel automated shipping of Sysmon and Windows Event Logs to Sentinel Velociraptor Live Response: Velociraptor 6.5.2: Server and endpoint instrumentation with internal PKI Hunting ELK automated server deployment and Windows 10 endpoint agent instrumentation to ship logs to server Customizable Winlogbeat version and configuration Sysmon 14: Fully customizable sysmon configuration and upgradeable to future Sysmon versions past v14 current support","title":"Capabilities and Use Cases"},{"location":"overview/#tools","text":"","title":"Tools"},{"location":"overview/#azure_adpy","text":"Generate the terraform for a custom Azure AD security lab. It uses a python library (faker) to generate as many Azure AD users as you desire, also creating AD Groups and AD Applications. Contains a vulnerable privilege escalation scenario that can be optionally enabled.","title":"azure_ad.py"},{"location":"overview/#adpy","text":"Create an Active Directory on-premise environment simulated with Azure VMs. This script is used to generate a more traditional infrastructure range. It can create an Active Directory Domain Services range, generating as many AD users as you wish. It also supports many other features such as Domain Join of Windows 10 systems, in addition to a SIEM instrumented with Sysmon.","title":"ad.py"},{"location":"overview/#sentinelpy","text":"Create a Microsoft Sentinel deployment configured in a log analytics workspace. Optionally configure Windows 10 to ship security and Sysmon logs to Sentinel. Optionally configure an Active Diretory environment with Domain Join.","title":"sentinel.py"},{"location":"overview/#storagepy","text":"Create some Azure storage resources, including a storage account, containers, blobs, file shares with files, key vault with secrets, keys, and certificate.","title":"storage.py"},{"location":"overview/#managed_identitypy","text":"Create an Azure managed identity attack lab with an Azure VM, a user or system assigned identity for the VM, and some storage and key vault resources to practice with.","title":"managed_identity.py"},{"location":"overview/#phishing_apppy","text":"Create a multi-tenant Azure AD application that can be used for app consent phishing simulations. You can specify a custom display name for the app along with custom redirect_uri, homepage_url, and logout_url.","title":"phishing_app.py"},{"location":"overview/#use-cases","text":"Research and pentest lab for Azure AD Security testing of Hybrid Join and Azure AD Joined devices EDR Testing lab PoC / Product Security Lab Enterprise Active Directory lab with domain joined devices Malware / reverse engineering to study artifacts against domain joined devices SIEM / Threat Hunting / DFIR / Live Response lab with HELK + Velociraptor [1, 2] Log aggregator architecture to forward logs to a cloud native SIEM (Microsoft Sentinel) Data Science research with HELK server, Jupyter notebooks Detection Engineering research with Mordor [3, 4]","title":"Use Cases"},{"location":"references/","text":"References [1] Velociraptor Website: https://www.velocidex.com/ [2] HELK Website: https://github.com/Cyb3rWard0g/HELK [3] Mordor Website: https://mordordatasets.com/introduction.html [4] Mordor Use Case: https://posts.specterops.io/enter-mordor-pre-recorded-security-events-from-simulated-adversarial-techniques-fdf5555c9eb1 [5] Atomic Red Team: https://github.com/redcanaryco/atomic-red-team [6] Invoke ART: https://github.com/redcanaryco/invoke-atomicredteam [7] Elastic Detection Rules: https://github.com/elastic/detection-rules [8] APTSimulator: https://github.com/NextronSystems/APTSimulator","title":"References"},{"location":"references/#references","text":"[1] Velociraptor Website: https://www.velocidex.com/ [2] HELK Website: https://github.com/Cyb3rWard0g/HELK [3] Mordor Website: https://mordordatasets.com/introduction.html [4] Mordor Use Case: https://posts.specterops.io/enter-mordor-pre-recorded-security-events-from-simulated-adversarial-techniques-fdf5555c9eb1 [5] Atomic Red Team: https://github.com/redcanaryco/atomic-red-team [6] Invoke ART: https://github.com/redcanaryco/invoke-atomicredteam [7] Elastic Detection Rules: https://github.com/elastic/detection-rules [8] APTSimulator: https://github.com/NextronSystems/APTSimulator","title":"References"},{"location":"tools/aad/","text":"Azure Active Directory lab Usage Examples Generating an Azure AD lab using azure_ad.py . This generates terraform formatted HCL files for users.tf . If applications and groups are created, the apps.tf and groups.tf will also be created. Important Note: This generator lives in the generators/azure_ad directory. Navigate into this directory first. cd generators/azure_ad Example 1: Basic Azure AD lab Generate a basic Azure AD lab. python3 azure_ad.py --upn rtcfingroup.com Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 100 users. It will output three files. The Azure AD password for all users will be automatically generated and output after terraform apply. azure_users.csv: A csv including the Azure AD user's full name, username, and email address. azure_usernames.txt: A file including just the usernames. azure_emails.txt: A file including just the email addresses. users.tf: Terraform file that will build the users. Example 2: Azure AD lab with 1,000 users Generate an Azure AD lab with 1,000 users. python3 azure_ad.py --upn rtcfingroup.com --count 1000 Description: Same as above, except generate 1,000 users in Azure AD. Running terraform apply will generate a random password shared by all users. The password applied to all users will be displayed at the end of terraform apply . To display the passwor again, run terraform output . Example 3: Azure applications and groups Generate a lab with Azure applications and groups. python3 azure_ad.py --upn rtcfingroup.com --count 500 --apps 3 --groups 5 Description: Same as above, except generate 500 users in Azure AD. Create 3 Azure applications and 5 groups. Automatically put the 500 users into separate groups. apps.tf: A terraform file with the Azure applications. groups.tf: A terraform file with the Azure groups. Example 4: Service Principal abuse attack primitives Generate a lab for Service Principal abuse attack primitives. $ python3 azure_ad.py -c 25 --upn rtcfingroup.com --apps 7 -aa -ga -pra Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 25 users. It will add some service principal abuse attack primitives to some random resources. First, the --apps 7 will add 7 Azure AD applications (App Registrations) with associated Service Principals (Enterprise Applications). The -aa flag will assign an Application Administrator role randomly to one of the 25 Azure AD users. The -ga flag will assign the Global Administrator role randomly to one of the 7 application SPs. Finally, the -pra flag will assign the Privileged role administrator role randomly to one of the other 7 application SPs. Demo A video demonstration of Azure AD with options and illustrations.","title":"Azure AD lab"},{"location":"tools/aad/#azure-active-directory-lab","text":"","title":"Azure Active Directory lab"},{"location":"tools/aad/#usage-examples","text":"Generating an Azure AD lab using azure_ad.py . This generates terraform formatted HCL files for users.tf . If applications and groups are created, the apps.tf and groups.tf will also be created. Important Note: This generator lives in the generators/azure_ad directory. Navigate into this directory first. cd generators/azure_ad","title":"Usage Examples"},{"location":"tools/aad/#example-1-basic-azure-ad-lab","text":"Generate a basic Azure AD lab. python3 azure_ad.py --upn rtcfingroup.com Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 100 users. It will output three files. The Azure AD password for all users will be automatically generated and output after terraform apply. azure_users.csv: A csv including the Azure AD user's full name, username, and email address. azure_usernames.txt: A file including just the usernames. azure_emails.txt: A file including just the email addresses. users.tf: Terraform file that will build the users.","title":"Example 1:  Basic Azure AD lab"},{"location":"tools/aad/#example-2-azure-ad-lab-with-1000-users","text":"Generate an Azure AD lab with 1,000 users. python3 azure_ad.py --upn rtcfingroup.com --count 1000 Description: Same as above, except generate 1,000 users in Azure AD. Running terraform apply will generate a random password shared by all users. The password applied to all users will be displayed at the end of terraform apply . To display the passwor again, run terraform output .","title":"Example 2:  Azure AD lab with 1,000 users"},{"location":"tools/aad/#example-3-azure-applications-and-groups","text":"Generate a lab with Azure applications and groups. python3 azure_ad.py --upn rtcfingroup.com --count 500 --apps 3 --groups 5 Description: Same as above, except generate 500 users in Azure AD. Create 3 Azure applications and 5 groups. Automatically put the 500 users into separate groups. apps.tf: A terraform file with the Azure applications. groups.tf: A terraform file with the Azure groups.","title":"Example 3:  Azure applications and groups"},{"location":"tools/aad/#example-4-service-principal-abuse-attack-primitives","text":"Generate a lab for Service Principal abuse attack primitives. $ python3 azure_ad.py -c 25 --upn rtcfingroup.com --apps 7 -aa -ga -pra Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 25 users. It will add some service principal abuse attack primitives to some random resources. First, the --apps 7 will add 7 Azure AD applications (App Registrations) with associated Service Principals (Enterprise Applications). The -aa flag will assign an Application Administrator role randomly to one of the 25 Azure AD users. The -ga flag will assign the Global Administrator role randomly to one of the 7 application SPs. Finally, the -pra flag will assign the Privileged role administrator role randomly to one of the other 7 application SPs.","title":"Example 4:  Service Principal abuse attack primitives"},{"location":"tools/aad/#demo","text":"A video demonstration of Azure AD with options and illustrations.","title":"Demo"},{"location":"tools/aadjoin/","text":"To be completed soon","title":"AAD Join"},{"location":"tools/aadjoin/#to-be-completed-soon","text":"","title":"To be completed soon"},{"location":"tools/ad/","text":"Azure VMs, Active Directory, and SIEM Overview Generating an Azure infrastructure lab using ad.py. This generator can create standalone Windows 10 endpoints, a full domain-joined enterprise Active Directory environment with users, or a SIEM with Velociraptor. Important Note: This generator lives in the generators/ad directory. Navigate into this directory first. cd generators/ad Usage Examples Example 1: One Windows 10 Endpoint with Sysmon installed python3 ad.py --endpoint 1 Description: This will generate a single Windows 10 Endpoint and generate a random, unique password with a default local Administrator account named RTCAdmin . This generates the following terraform files: main.tf: Terraform file with resource group and location. network.tf: Terraform file with VNet and subnets. nsg.tf: Terraform file with Network Security Groups. providers.tf: Terraform file containing terraform providers. sysmon.tf: Terraform file containing sysmon configuration. win10-1.tf: Terraform file with Windows 10 Pro configuration. Example 2: Domain Controller with Forest and Users + Windows Domain Join (Randomly Generate Users) python3 ad.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will create a Domain Controller in dc.tf and install AD DS with forest name of rtcfingroup.com . This will create a custom local administrator account and password with 500 domain users. In this example, the domain users are randomly generated using the command line flag of --ad_users for a total of 500 users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc.tf). Example 3: Domain Controller with Forest and Users + Windows Domain Join (Import Custom Users from CSV) python3 ad.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --csv users.csv --endpoints 2 --domain_join Description: Same capabilities as above, except it can import a custom list of Domain Users into active directory on the DC instance. The script checks to make sure that users are in the correct format. An example CSV showing five users is listed below: name,upn,password,groups,oupath,domain_admin Lars Borgerson,larsborgerson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Olivia Odinsdottir,oliviaodinsdottir@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Liem Anderson,liemanderson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False John Nilsson,johnnilsson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Jason Lindqvist,jasonlindqvist@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Example 4: Build a Veloicraptor + Hunting ELK server and automatically export sysmon winlog beat logs python3 ad.py --helk --endpoint 1 Description: This will add a Velociraptor + Hunting ELK server with one Windows 10 Endpoint. The winlogbeat agent will be installed on Windows 10 Pro and the logs will be sent to the HELK server. Velociraptor will be installed on the HELK server and the Velociraptor agent on Windows 10 Pro. The endpoint will automatically register to the Velociraptor server running on HELK. This will create a terraform file for the HELK server (helk.tf) Default OS and Application Credentials: OS username: helk. HELK Username: admin. Can be changed in local.vadmin_username . HELK Password: Randomly generated. Can be changed in local.vadmin_password . Velociraptor Username: admin. Can be changed in local.vadmin_username . Velociraptor Password: Randomly generated. Can be changed in local.vadmin_password . Accessing Credentials and Application URLs: After the range has built, type terraform output to get the credentials and URLs for HELK and Velociraptor. Input Files for Velociraptor + HELK: The following files are automatically uploaded to storage container and then downloaded by the HELk + Velociraptor system. They can be fully customized to suit your needs. All files are contained in the files/velocihelk directory: Sysmon.zip: The sysmon version to be used on Windows 10 endpoints. This version is v14.0. sysmonconfig-export.xml: The sysmon configuration to be used. Currently uses github.com/SwiftOnSecurity. velociraptor-v0.6.5-2-linux-amd64.gz: The velociraptor linux binary that runs on the server. velociraptor-v0.6.5-2-windows-amd64.msi: The velociraptor msi that runs on windows 10 endpoints. winlogbeat-7.9.2-windows-x86_64.zip: The winlogbeat agent that runs on windows 10 endpoints and ships logs to the HELK server. winlogbeat.yml.tpl: The configuration file for winlogbeat agent that currently sends to HELK using kafka transport. Details Advanced Command Line --resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --helk : Create a hunting ELK server (with Velociraptor installed) (Default: Disabled) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --csv <csv_file> : A custom CSV file to use that will load domain users on the DC's AD DS (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false) How AD Builds on the DC Some notes I've gathered on AD usage and building. Azure AD Connect: The Azure AD connect MSI is included in ths repo. It can be upgraded by replacing the file in files/dc/AzureADConnect.msi . The current version is 2.x of AD Connect. The file is uploaded to the storage container and then downloaded to the local Administrator's desktop. The bootstrap script for building Active Directory is contained in files/dc/bootstrap-dc.ps1.tpl . This script is used to build AD DS on the dc instance created in dc.tf. After terraform runs, the actual rendered dc bootstrap script (with variables) is output to output/dc/bootstrap-dc1.ps1. For troubleshooting you can copy that script to the DC and run it. The way AD users, groups, and OUs are added: In the CSV file, there is a field for oupath . The string for the OU= is looked at and a new OU is created if it hasn't already. This is the way new OUs can be added. AD users are added to that specific OU when they are created. For adding AD Groups, the CSV field for groups is examined. The user is added into that AD group. The groups and OU= portion of the oupath should match. If they don't, problems could arise adding the user. The ad_users.csv file is the name of the file that the DC uses to build AD. It is uploaded to the storage container that is created and downloaded automatically by the DC. Look in C:\\terraform\\ad_users.csv to look at this file if needed. When using the --csv <file1> to specify your own AD users CSV, how this works: That file is copied to ad_users.csv and it is uploaded to the storage container, and downloaded to the DC. Same as above, it is copied into C:\\terraform\\ad_users.csv where the bootstrap script parses it. For auto_logon domain users: An AD domain user is randomly selected for logging on that Windows 10 Pro endpoint. To customize which domain user is used, you can manually edit the windows 10 terraform file (i.e., win10-1.tf). Edit script options in ad.py Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":sysmon_endpoint_config, \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. A second terraform resource is then used to manage and update any changes to your public IP address. You can hard code a different IP address in the following section of the ad.py script or the terraform nsg.tf file. If you change locations and your IP address changes, simply type terraform apply and the NSG white-listed public IP address should update through terraform. locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } Outputs: After the terraform resources are applied and build, you can type terraform output to get some important information such as the public IP address of VMs in addition to credentials for OS and applications. Terraform Outputs You can get the details of each Virtual Machine, including passwords, by typing terraform output . Demo A video demonstration of AD with options and illustrations.","title":"Azure VMs, Active Directory, and SIEM"},{"location":"tools/ad/#azure-vms-active-directory-and-siem","text":"","title":"Azure VMs, Active Directory, and SIEM"},{"location":"tools/ad/#overview","text":"Generating an Azure infrastructure lab using ad.py. This generator can create standalone Windows 10 endpoints, a full domain-joined enterprise Active Directory environment with users, or a SIEM with Velociraptor. Important Note: This generator lives in the generators/ad directory. Navigate into this directory first. cd generators/ad","title":"Overview"},{"location":"tools/ad/#usage-examples","text":"","title":"Usage Examples"},{"location":"tools/ad/#example-1-one-windows-10-endpoint-with-sysmon-installed","text":"python3 ad.py --endpoint 1 Description: This will generate a single Windows 10 Endpoint and generate a random, unique password with a default local Administrator account named RTCAdmin . This generates the following terraform files: main.tf: Terraform file with resource group and location. network.tf: Terraform file with VNet and subnets. nsg.tf: Terraform file with Network Security Groups. providers.tf: Terraform file containing terraform providers. sysmon.tf: Terraform file containing sysmon configuration. win10-1.tf: Terraform file with Windows 10 Pro configuration.","title":"Example 1: One Windows 10 Endpoint with Sysmon installed"},{"location":"tools/ad/#example-2-domain-controller-with-forest-and-users-windows-domain-join-randomly-generate-users","text":"python3 ad.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will create a Domain Controller in dc.tf and install AD DS with forest name of rtcfingroup.com . This will create a custom local administrator account and password with 500 domain users. In this example, the domain users are randomly generated using the command line flag of --ad_users for a total of 500 users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc.tf).","title":"Example 2: Domain Controller with Forest and Users + Windows Domain Join (Randomly Generate Users)"},{"location":"tools/ad/#example-3-domain-controller-with-forest-and-users-windows-domain-join-import-custom-users-from-csv","text":"python3 ad.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --csv users.csv --endpoints 2 --domain_join Description: Same capabilities as above, except it can import a custom list of Domain Users into active directory on the DC instance. The script checks to make sure that users are in the correct format. An example CSV showing five users is listed below: name,upn,password,groups,oupath,domain_admin Lars Borgerson,larsborgerson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Olivia Odinsdottir,oliviaodinsdottir@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Liem Anderson,liemanderson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False John Nilsson,johnnilsson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Jason Lindqvist,jasonlindqvist@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True","title":"Example 3: Domain Controller with Forest and Users + Windows Domain Join (Import Custom Users from CSV)"},{"location":"tools/ad/#example-4-build-a-veloicraptor-hunting-elk-server-and-automatically-export-sysmon-winlog-beat-logs","text":"python3 ad.py --helk --endpoint 1 Description: This will add a Velociraptor + Hunting ELK server with one Windows 10 Endpoint. The winlogbeat agent will be installed on Windows 10 Pro and the logs will be sent to the HELK server. Velociraptor will be installed on the HELK server and the Velociraptor agent on Windows 10 Pro. The endpoint will automatically register to the Velociraptor server running on HELK. This will create a terraform file for the HELK server (helk.tf) Default OS and Application Credentials: OS username: helk. HELK Username: admin. Can be changed in local.vadmin_username . HELK Password: Randomly generated. Can be changed in local.vadmin_password . Velociraptor Username: admin. Can be changed in local.vadmin_username . Velociraptor Password: Randomly generated. Can be changed in local.vadmin_password . Accessing Credentials and Application URLs: After the range has built, type terraform output to get the credentials and URLs for HELK and Velociraptor. Input Files for Velociraptor + HELK: The following files are automatically uploaded to storage container and then downloaded by the HELk + Velociraptor system. They can be fully customized to suit your needs. All files are contained in the files/velocihelk directory: Sysmon.zip: The sysmon version to be used on Windows 10 endpoints. This version is v14.0. sysmonconfig-export.xml: The sysmon configuration to be used. Currently uses github.com/SwiftOnSecurity. velociraptor-v0.6.5-2-linux-amd64.gz: The velociraptor linux binary that runs on the server. velociraptor-v0.6.5-2-windows-amd64.msi: The velociraptor msi that runs on windows 10 endpoints. winlogbeat-7.9.2-windows-x86_64.zip: The winlogbeat agent that runs on windows 10 endpoints and ships logs to the HELK server. winlogbeat.yml.tpl: The configuration file for winlogbeat agent that currently sends to HELK using kafka transport.","title":"Example 4: Build a Veloicraptor + Hunting ELK server and automatically export sysmon winlog beat logs"},{"location":"tools/ad/#details","text":"","title":"Details"},{"location":"tools/ad/#advanced-command-line","text":"--resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --helk : Create a hunting ELK server (with Velociraptor installed) (Default: Disabled) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --csv <csv_file> : A custom CSV file to use that will load domain users on the DC's AD DS (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false)","title":"Advanced Command Line"},{"location":"tools/ad/#how-ad-builds-on-the-dc","text":"Some notes I've gathered on AD usage and building. Azure AD Connect: The Azure AD connect MSI is included in ths repo. It can be upgraded by replacing the file in files/dc/AzureADConnect.msi . The current version is 2.x of AD Connect. The file is uploaded to the storage container and then downloaded to the local Administrator's desktop. The bootstrap script for building Active Directory is contained in files/dc/bootstrap-dc.ps1.tpl . This script is used to build AD DS on the dc instance created in dc.tf. After terraform runs, the actual rendered dc bootstrap script (with variables) is output to output/dc/bootstrap-dc1.ps1. For troubleshooting you can copy that script to the DC and run it. The way AD users, groups, and OUs are added: In the CSV file, there is a field for oupath . The string for the OU= is looked at and a new OU is created if it hasn't already. This is the way new OUs can be added. AD users are added to that specific OU when they are created. For adding AD Groups, the CSV field for groups is examined. The user is added into that AD group. The groups and OU= portion of the oupath should match. If they don't, problems could arise adding the user. The ad_users.csv file is the name of the file that the DC uses to build AD. It is uploaded to the storage container that is created and downloaded automatically by the DC. Look in C:\\terraform\\ad_users.csv to look at this file if needed. When using the --csv <file1> to specify your own AD users CSV, how this works: That file is copied to ad_users.csv and it is uploaded to the storage container, and downloaded to the DC. Same as above, it is copied into C:\\terraform\\ad_users.csv where the bootstrap script parses it. For auto_logon domain users: An AD domain user is randomly selected for logging on that Windows 10 Pro endpoint. To customize which domain user is used, you can manually edit the windows 10 terraform file (i.e., win10-1.tf).","title":"How AD Builds on the DC"},{"location":"tools/ad/#edit-script-options-in-adpy","text":"Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":sysmon_endpoint_config, \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. A second terraform resource is then used to manage and update any changes to your public IP address. You can hard code a different IP address in the following section of the ad.py script or the terraform nsg.tf file. If you change locations and your IP address changes, simply type terraform apply and the NSG white-listed public IP address should update through terraform. locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } Outputs: After the terraform resources are applied and build, you can type terraform output to get some important information such as the public IP address of VMs in addition to credentials for OS and applications.","title":"Edit script options in ad.py"},{"location":"tools/ad/#terraform-outputs","text":"You can get the details of each Virtual Machine, including passwords, by typing terraform output .","title":"Terraform Outputs"},{"location":"tools/ad/#demo","text":"A video demonstration of AD with options and illustrations.","title":"Demo"},{"location":"tools/adfs/","text":"ADFS Federation Lab Overview Generating an ADFS Federation lab with adfs.py. This generator can create an enterprise ADFS server deployment with a Domain Controller. It can also add a full domain-joined enterprise Active Directory environment with users and Windows 10 Professional endpoints. This generator always adds a Microsoft Sentinel deployment with a Log Analytics workspace. The ADFS server automatically installs the Azure legacy monitoring agent with Sysmon and ADFS security auditing configuration, and will ship the logs into Sentinel via the agent. For each Windows 10 Pro system added, they will all have Sysmon installed, the legacy monitoring agent, and ship Sysmon logs to Sentinel. To summarize, the following Azure resources are always created by default with this lab: One ADFS server joined to an AD Domain One DC One Sentinel deployment Important Note: This generator lives in the generators/adfs directory. Navigate into this directory first. cd generators/adfs Usage Examples Example 1: One ADFS Server and one Domain Controller, with self-signed ADFS certificate python3 adfds.py Description: This will generate a lab with a single ADFS server and Domain Controller. The ADFS server will use a self-signed certificate. Five AD users will be created with a default AD domain of rtc.local . This generates the following terraform files: adfs.tf: Terraform file defining ADFS configuration. dc_adfs.tf: Terraform file defining the Domain Controller configuration. main_adfs.tf: Terraform file with resource group and location. network_adfs.tf: Terraform file with VNet and subnets. nsg_adfs.tf: Terraform file with Network Security Groups. providers.tf: Terraform file containing terraform providers. sentinel_adfs.tf: Terraform file with Network Security Groups. storage_adfs.tf: Terraform file containing sysmon and all other files used for configuration. In addition to the above terraform files, a single file will be created with five AD users: ad_users.csv Example 2: ADFS Server with DC. The ADFS Server will import a trusted, CA signed certificate. python3 adfs.py --trusted_cert adfs.pfx --pfx_password password --ad_domain rtcsecurity.net Description: This will build an ADFS server and DC as described in example 1. In this example, a trusted, CA signed certificate is imported. The name of the certificate is passed in the parameter --trusted_cert . The format of the file is pfx, and the password used to protect the file is passed in the parameter --pfx_password . Finally, an AD Domain used to create AD is specified in the --ad_domain . The Azure Simuland project has a great guide on how to get a trusted CA signed SSL certificate: https://github.com/Azure/SimuLand/blob/main/docs/environments/_helper-docs/getTrustedCASignedSSLCertificate.md Example 3: ADFS + DC + Adding Windows 10 Professional (Randomly generate AD users) python3 adfs.py --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --endpoints 1 --domain_join --ad_users 500 Description: This example builds an Active Directory domain of rtcfingroup.com on the DC. The ADFS server automatically joins to this AD domain and a self-signed certificate will be used to build ADFS. With --endpoints 1 , one Windows 10 Pro system is created and it is set to join the domain with --domain_join . Finally, 500 AD users are randomly generated and added to the AD Domain, with assignment into AD Groups and OUs that are also created. Example 4: ADFS + DC + Adding Windows 10 Professional (Import Custom Users from CSV) python3 adfs.py --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --csv users.csv --endpoints 1 --domain_join --ad_users 500 Description: Same capabilities as above, except it can import a custom list of Domain Users into active directory on the DC instance. With the --csv users.csv , a file named users.csv is looked for in the working directory. The script checks to make sure that users are in the correct format. An example CSV showing five users is listed below: name,upn,password,groups,oupath,domain_admin Lars Borgerson,larsborgerson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Olivia Odinsdottir,oliviaodinsdottir@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Liem Anderson,liemanderson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False John Nilsson,johnnilsson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Jason Lindqvist,jasonlindqvist@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Details Advanced Command Line --resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --helk : Create a hunting ELK server (with Velociraptor installed) (Default: Disabled) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --csv <csv_file> : A custom CSV file to use that will load domain users on the DC's AD DS (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false) How AD Builds on the DC Some notes I've gathered on AD usage and building. Azure AD Connect: The Azure AD connect MSI is included in ths repo. It can be upgraded by replacing the file in files/dc/AzureADConnect.msi . The current version is 2.x of AD Connect. The file is uploaded to the storage container and then downloaded to the local Administrator's desktop. The bootstrap script for building Active Directory is contained in files/dc/bootstrap-dc.ps1.tpl . This script is used to build AD DS on the dc instance created in dc.tf. After terraform runs, the actual rendered dc bootstrap script (with variables) is output to output/dc/bootstrap-dc1.ps1. For troubleshooting you can copy that script to the DC and run it. The way AD users, groups, and OUs are added: In the CSV file, there is a field for oupath . The string for the OU= is looked at and a new OU is created if it hasn't already. This is the way new OUs can be added. AD users are added to that specific OU when they are created. For adding AD Groups, the CSV field for groups is examined. The user is added into that AD group. The groups and OU= portion of the oupath should match. If they don't, problems could arise adding the user. The ad_users.csv file is the name of the file that the DC uses to build AD. It is uploaded to the storage container that is created and downloaded automatically by the DC. Look in C:\\terraform\\ad_users.csv to look at this file if needed. When using the --csv <file1> to specify your own AD users CSV, how this works: That file is copied to ad_users.csv and it is uploaded to the storage container, and downloaded to the DC. Same as above, it is copied into C:\\terraform\\ad_users.csv where the bootstrap script parses it. For auto_logon domain users: An AD domain user is randomly selected for logging on that Windows 10 Pro endpoint. To customize which domain user is used, you can manually edit the windows 10 terraform file (i.e., win10-1.tf). Edit script options in ad.py Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":sysmon_endpoint_config, \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. A second terraform resource is then used to manage and update any changes to your public IP address. You can hard code a different IP address in the following section of the ad.py script or the terraform nsg.tf file. If you change locations and your IP address changes, simply type terraform apply and the NSG white-listed public IP address should update through terraform. locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } Outputs: After the terraform resources are applied and build, you can type terraform output to get some important information such as the public IP address of VMs in addition to credentials for OS and applications. Terraform Outputs You can get the details of each Virtual Machine, including passwords, by typing terraform output . Demo A video demonstration of building an ADFS Federation lab with options and illustrations.","title":"ADFS"},{"location":"tools/adfs/#adfs-federation-lab","text":"","title":"ADFS Federation Lab"},{"location":"tools/adfs/#overview","text":"Generating an ADFS Federation lab with adfs.py. This generator can create an enterprise ADFS server deployment with a Domain Controller. It can also add a full domain-joined enterprise Active Directory environment with users and Windows 10 Professional endpoints. This generator always adds a Microsoft Sentinel deployment with a Log Analytics workspace. The ADFS server automatically installs the Azure legacy monitoring agent with Sysmon and ADFS security auditing configuration, and will ship the logs into Sentinel via the agent. For each Windows 10 Pro system added, they will all have Sysmon installed, the legacy monitoring agent, and ship Sysmon logs to Sentinel. To summarize, the following Azure resources are always created by default with this lab: One ADFS server joined to an AD Domain One DC One Sentinel deployment Important Note: This generator lives in the generators/adfs directory. Navigate into this directory first. cd generators/adfs","title":"Overview"},{"location":"tools/adfs/#usage-examples","text":"","title":"Usage Examples"},{"location":"tools/adfs/#example-1-one-adfs-server-and-one-domain-controller-with-self-signed-adfs-certificate","text":"python3 adfds.py Description: This will generate a lab with a single ADFS server and Domain Controller. The ADFS server will use a self-signed certificate. Five AD users will be created with a default AD domain of rtc.local . This generates the following terraform files: adfs.tf: Terraform file defining ADFS configuration. dc_adfs.tf: Terraform file defining the Domain Controller configuration. main_adfs.tf: Terraform file with resource group and location. network_adfs.tf: Terraform file with VNet and subnets. nsg_adfs.tf: Terraform file with Network Security Groups. providers.tf: Terraform file containing terraform providers. sentinel_adfs.tf: Terraform file with Network Security Groups. storage_adfs.tf: Terraform file containing sysmon and all other files used for configuration. In addition to the above terraform files, a single file will be created with five AD users: ad_users.csv","title":"Example 1: One ADFS Server and one Domain Controller, with self-signed ADFS certificate"},{"location":"tools/adfs/#example-2-adfs-server-with-dc-the-adfs-server-will-import-a-trusted-ca-signed-certificate","text":"python3 adfs.py --trusted_cert adfs.pfx --pfx_password password --ad_domain rtcsecurity.net Description: This will build an ADFS server and DC as described in example 1. In this example, a trusted, CA signed certificate is imported. The name of the certificate is passed in the parameter --trusted_cert . The format of the file is pfx, and the password used to protect the file is passed in the parameter --pfx_password . Finally, an AD Domain used to create AD is specified in the --ad_domain . The Azure Simuland project has a great guide on how to get a trusted CA signed SSL certificate: https://github.com/Azure/SimuLand/blob/main/docs/environments/_helper-docs/getTrustedCASignedSSLCertificate.md","title":"Example 2: ADFS Server with DC.  The ADFS Server will import a trusted, CA signed certificate."},{"location":"tools/adfs/#example-3-adfs-dc-adding-windows-10-professional-randomly-generate-ad-users","text":"python3 adfs.py --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --endpoints 1 --domain_join --ad_users 500 Description: This example builds an Active Directory domain of rtcfingroup.com on the DC. The ADFS server automatically joins to this AD domain and a self-signed certificate will be used to build ADFS. With --endpoints 1 , one Windows 10 Pro system is created and it is set to join the domain with --domain_join . Finally, 500 AD users are randomly generated and added to the AD Domain, with assignment into AD Groups and OUs that are also created.","title":"Example 3: ADFS + DC + Adding Windows 10 Professional (Randomly generate AD users)"},{"location":"tools/adfs/#example-4-adfs-dc-adding-windows-10-professional-import-custom-users-from-csv","text":"python3 adfs.py --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --csv users.csv --endpoints 1 --domain_join --ad_users 500 Description: Same capabilities as above, except it can import a custom list of Domain Users into active directory on the DC instance. With the --csv users.csv , a file named users.csv is looked for in the working directory. The script checks to make sure that users are in the correct format. An example CSV showing five users is listed below: name,upn,password,groups,oupath,domain_admin Lars Borgerson,larsborgerson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Olivia Odinsdottir,oliviaodinsdottir@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Liem Anderson,liemanderson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False John Nilsson,johnnilsson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Jason Lindqvist,jasonlindqvist@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True","title":"Example 4: ADFS + DC + Adding Windows 10 Professional (Import Custom Users from CSV)"},{"location":"tools/adfs/#details","text":"","title":"Details"},{"location":"tools/adfs/#advanced-command-line","text":"--resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --helk : Create a hunting ELK server (with Velociraptor installed) (Default: Disabled) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --csv <csv_file> : A custom CSV file to use that will load domain users on the DC's AD DS (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false)","title":"Advanced Command Line"},{"location":"tools/adfs/#how-ad-builds-on-the-dc","text":"Some notes I've gathered on AD usage and building. Azure AD Connect: The Azure AD connect MSI is included in ths repo. It can be upgraded by replacing the file in files/dc/AzureADConnect.msi . The current version is 2.x of AD Connect. The file is uploaded to the storage container and then downloaded to the local Administrator's desktop. The bootstrap script for building Active Directory is contained in files/dc/bootstrap-dc.ps1.tpl . This script is used to build AD DS on the dc instance created in dc.tf. After terraform runs, the actual rendered dc bootstrap script (with variables) is output to output/dc/bootstrap-dc1.ps1. For troubleshooting you can copy that script to the DC and run it. The way AD users, groups, and OUs are added: In the CSV file, there is a field for oupath . The string for the OU= is looked at and a new OU is created if it hasn't already. This is the way new OUs can be added. AD users are added to that specific OU when they are created. For adding AD Groups, the CSV field for groups is examined. The user is added into that AD group. The groups and OU= portion of the oupath should match. If they don't, problems could arise adding the user. The ad_users.csv file is the name of the file that the DC uses to build AD. It is uploaded to the storage container that is created and downloaded automatically by the DC. Look in C:\\terraform\\ad_users.csv to look at this file if needed. When using the --csv <file1> to specify your own AD users CSV, how this works: That file is copied to ad_users.csv and it is uploaded to the storage container, and downloaded to the DC. Same as above, it is copied into C:\\terraform\\ad_users.csv where the bootstrap script parses it. For auto_logon domain users: An AD domain user is randomly selected for logging on that Windows 10 Pro endpoint. To customize which domain user is used, you can manually edit the windows 10 terraform file (i.e., win10-1.tf).","title":"How AD Builds on the DC"},{"location":"tools/adfs/#edit-script-options-in-adpy","text":"Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":sysmon_endpoint_config, \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. A second terraform resource is then used to manage and update any changes to your public IP address. You can hard code a different IP address in the following section of the ad.py script or the terraform nsg.tf file. If you change locations and your IP address changes, simply type terraform apply and the NSG white-listed public IP address should update through terraform. locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } Outputs: After the terraform resources are applied and build, you can type terraform output to get some important information such as the public IP address of VMs in addition to credentials for OS and applications.","title":"Edit script options in ad.py"},{"location":"tools/adfs/#terraform-outputs","text":"You can get the details of each Virtual Machine, including passwords, by typing terraform output .","title":"Terraform Outputs"},{"location":"tools/adfs/#demo","text":"A video demonstration of building an ADFS Federation lab with options and illustrations.","title":"Demo"},{"location":"tools/midentity/","text":"Azure Managed Identity lab Overview Create an attack and defense lab for managed identity with one Azure Virtual Machine. An Azure VM is configured with a user assigned managed identity and optional system assigned identity. An Azure AD user is also created. Generates terraform format HCL files for managed_identity.tf , providers.tf , and mi_user.tf . Important Note: This generator lives in the generators/managed_identity directory. Navigate into this directory first. cd generators/managed_identity Usage Examples Example 1: Windows 10 Endpoint with a User Assigned Identity (Reader Role) python3 managed_identity.py -u rtcfingroup.com -ua reader Description: This will generate terraform HCL files for a managed identity attack and defense lab. The following options are enabled: -u rtcfingroup.com: Specify a UPN suffix or default domain for the one Azure AD user that is created. -ua reader: Create a user assigned identity with a Reader role on the subscription, and attach it to the created Azure VM. Default Options: Default Administrator: A default local Administrator account on the VM is MIAdmin . Default Password: A default local Administrator password is automatically generated and used for the VM and Azure AD user. Default Name: A default name for resources and resource group is automatically generated by terraform. Default Azure User: An Azure AD user is randomly generated with the upn suffix domain specified above. A role of Virtual Machine Contributor is assigned to the user by default. Example 2: Windows 10 Endpoint with a User Assigned Identity (Contributor Role) python3 managed_identity.py -u rtcfingroup.com -ua contributor Description: Same scenario as above except it will set the Contributor role (scoped to Subscription) to the user assigned identity attached to the Azure VM. Example 3: Windows 10 Endpoint with a User Assigned Identity (Owner Role) + System Assigned Identity python3 managed_identity.py -u rtcfingroup.com -n rtcfin -l eastus -a RTCAdmin -p MyPassword012345 -ua owner -sa Description: Same scenario as above except it will set the Owner role to the user assigned identity attached to the Azure VM. Extra options enabled include: -n rtcfin: Specify a friendly name of rtcfin for the Resource Group and some of the Azure resources created. -l eastus: Specify an Azure location of eastus for the Azure resources. -a RTCAdmin: Specify the local Administrator username of RTCAdmin on the Azure VM. -p MyPassword012345: Specify a password for the VM local admin as well as the Azure AD user. -sa: Enable a System Assigned identity for the Azure VM. Details All Resources Created One Azure AD User with a configurable Role Assignment (Default: Virtual Machine Contributor) One Azure VM with a Managed Identity configured (Default: User Assigned Identity with Reader on the Subscription) Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1) All Options Available -u <UPN_SUFFIX> : Mandatory. Specify the correct UPN Suffix for your tenant. Needed for creating the Azure AD user. -a <ADMIN_USERNAME> : Specify the local Administrator Username for the Windows 10 Pro Azure VM. (Default: MIAdmin) -p <PASSWORD> : Specify the password for the local Administrator account on the VM as well as the Azure AD user (Default: Auto-generated) -sa : Enables the System Assigned Identity for the Azure VM (Note: both user assigned and system assigned can be enabled) -ua reader|contributor|owner : Enables the User Assigned Identity for the Azure VM with possible values of reader, contributor, owner (Default: reader) -n <NAME> : Specify a resource group name and name for other resources -l <LOCATION> : Specify a different location (Default: centralus) Other Variables in Script This is the configuration for protecting access to the Azure VM. By default it will get your public IP address of the workstation running terraform. You can comment out as appropriate to allow all IP addresses or a specific IP address as shown below. # This is the src_ip for white listing Azure NSGs locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } The role of the user assigned managed identity by default is scoped to the subscription but can be customized as shown below: # Assign the reader role on the Key vault to the Managed Identity resource \"azurerm_role_assignment\" \"uai\" { #Scope to the key vault in line below #scope = azurerm_key_vault.example.id #Scope to the subscription in line below scope = data.azurerm_subscription.mi.id role_definition_name = \"ROLE_DEFINITION_NAME\" principal_id = azurerm_user_assigned_identity.uai.principal_id } The role of the Azure AD user # The role scoped to subscription for AAD user # uncomment as needed variable \"user_role\" { default = \"Virtual Machine Contributor\" #default = \"Contributor\" #default = \"Reader\" #default = \"Owner\" } Demo A video demonstration of building a managed identity lab with options and illustrations.","title":"Azure Managed Identity lab"},{"location":"tools/midentity/#azure-managed-identity-lab","text":"","title":"Azure Managed Identity lab"},{"location":"tools/midentity/#overview","text":"Create an attack and defense lab for managed identity with one Azure Virtual Machine. An Azure VM is configured with a user assigned managed identity and optional system assigned identity. An Azure AD user is also created. Generates terraform format HCL files for managed_identity.tf , providers.tf , and mi_user.tf . Important Note: This generator lives in the generators/managed_identity directory. Navigate into this directory first. cd generators/managed_identity","title":"Overview"},{"location":"tools/midentity/#usage-examples","text":"","title":"Usage Examples"},{"location":"tools/midentity/#example-1-windows-10-endpoint-with-a-user-assigned-identity-reader-role","text":"python3 managed_identity.py -u rtcfingroup.com -ua reader Description: This will generate terraform HCL files for a managed identity attack and defense lab. The following options are enabled: -u rtcfingroup.com: Specify a UPN suffix or default domain for the one Azure AD user that is created. -ua reader: Create a user assigned identity with a Reader role on the subscription, and attach it to the created Azure VM. Default Options: Default Administrator: A default local Administrator account on the VM is MIAdmin . Default Password: A default local Administrator password is automatically generated and used for the VM and Azure AD user. Default Name: A default name for resources and resource group is automatically generated by terraform. Default Azure User: An Azure AD user is randomly generated with the upn suffix domain specified above. A role of Virtual Machine Contributor is assigned to the user by default.","title":"Example 1:  Windows 10 Endpoint with a User Assigned Identity (Reader Role)"},{"location":"tools/midentity/#example-2-windows-10-endpoint-with-a-user-assigned-identity-contributor-role","text":"python3 managed_identity.py -u rtcfingroup.com -ua contributor Description: Same scenario as above except it will set the Contributor role (scoped to Subscription) to the user assigned identity attached to the Azure VM.","title":"Example 2:  Windows 10 Endpoint with a User Assigned Identity (Contributor Role)"},{"location":"tools/midentity/#example-3-windows-10-endpoint-with-a-user-assigned-identity-owner-role-system-assigned-identity","text":"python3 managed_identity.py -u rtcfingroup.com -n rtcfin -l eastus -a RTCAdmin -p MyPassword012345 -ua owner -sa Description: Same scenario as above except it will set the Owner role to the user assigned identity attached to the Azure VM. Extra options enabled include: -n rtcfin: Specify a friendly name of rtcfin for the Resource Group and some of the Azure resources created. -l eastus: Specify an Azure location of eastus for the Azure resources. -a RTCAdmin: Specify the local Administrator username of RTCAdmin on the Azure VM. -p MyPassword012345: Specify a password for the VM local admin as well as the Azure AD user. -sa: Enable a System Assigned identity for the Azure VM.","title":"Example 3: Windows 10 Endpoint with a User Assigned Identity (Owner Role) + System Assigned Identity"},{"location":"tools/midentity/#details","text":"","title":"Details"},{"location":"tools/midentity/#all-resources-created","text":"One Azure AD User with a configurable Role Assignment (Default: Virtual Machine Contributor) One Azure VM with a Managed Identity configured (Default: User Assigned Identity with Reader on the Subscription) Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1)","title":"All Resources Created"},{"location":"tools/midentity/#all-options-available","text":"-u <UPN_SUFFIX> : Mandatory. Specify the correct UPN Suffix for your tenant. Needed for creating the Azure AD user. -a <ADMIN_USERNAME> : Specify the local Administrator Username for the Windows 10 Pro Azure VM. (Default: MIAdmin) -p <PASSWORD> : Specify the password for the local Administrator account on the VM as well as the Azure AD user (Default: Auto-generated) -sa : Enables the System Assigned Identity for the Azure VM (Note: both user assigned and system assigned can be enabled) -ua reader|contributor|owner : Enables the User Assigned Identity for the Azure VM with possible values of reader, contributor, owner (Default: reader) -n <NAME> : Specify a resource group name and name for other resources -l <LOCATION> : Specify a different location (Default: centralus)","title":"All Options Available"},{"location":"tools/midentity/#other-variables-in-script","text":"This is the configuration for protecting access to the Azure VM. By default it will get your public IP address of the workstation running terraform. You can comment out as appropriate to allow all IP addresses or a specific IP address as shown below. # This is the src_ip for white listing Azure NSGs locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } The role of the user assigned managed identity by default is scoped to the subscription but can be customized as shown below: # Assign the reader role on the Key vault to the Managed Identity resource \"azurerm_role_assignment\" \"uai\" { #Scope to the key vault in line below #scope = azurerm_key_vault.example.id #Scope to the subscription in line below scope = data.azurerm_subscription.mi.id role_definition_name = \"ROLE_DEFINITION_NAME\" principal_id = azurerm_user_assigned_identity.uai.principal_id } The role of the Azure AD user # The role scoped to subscription for AAD user # uncomment as needed variable \"user_role\" { default = \"Virtual Machine Contributor\" #default = \"Contributor\" #default = \"Reader\" #default = \"Owner\" }","title":"Other Variables in Script"},{"location":"tools/midentity/#demo","text":"A video demonstration of building a managed identity lab with options and illustrations.","title":"Demo"},{"location":"tools/phishing_app/","text":"Phishing Application $ python3 phishing_app.py --name <DISPLAY_NAME> --redirect_uri <REDIRECT_URI> This generates a terraform format HCL file for phishing_app.tf . Example 1: python3 phishing_app.py Example 2: python3 phishing_app.py --name EvilApp --redirect_uri https://www.evil-app.com/get_token Important Note: This generator lives in the generators/phishing_app directory. Navigate into this directory first. cd generators/phishing_app The following Graph API delegated scope permissions are automatically created for the application: Contacts.Read Mail.Read Mail.Send Files.Read Files.Read.All Files.ReadWrite.All User.Read API permissions can be customized by adding the id for the correct permission, as shown in the code block below: resource_access { id = \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\" # Mail.Read type = \"Scope\" } Full command line parameters --name <DISPLAY_NAME> : Specify the display name for the application (Default: Sample App) --redirect_uri <REDIRECT_URI> : The redirect uri that the application uses to receive OAuth tokens. (Default: \"http://localhost:30662/gettoken\") --homepage_url <HOMEPAGE_URL> : The homepage URL used by the application. (Default: \"https://localhost:30662\") --logout_url <LOGOUT_URL> : The logout URL used by the application. (Default: \"https://localhost:30662/logout\") Demo A video demonstration of building an application consent phishing lab with options and illustrations.","title":"Phishing App"},{"location":"tools/phishing_app/#phishing-application","text":"$ python3 phishing_app.py --name <DISPLAY_NAME> --redirect_uri <REDIRECT_URI> This generates a terraform format HCL file for phishing_app.tf . Example 1: python3 phishing_app.py Example 2: python3 phishing_app.py --name EvilApp --redirect_uri https://www.evil-app.com/get_token Important Note: This generator lives in the generators/phishing_app directory. Navigate into this directory first. cd generators/phishing_app The following Graph API delegated scope permissions are automatically created for the application: Contacts.Read Mail.Read Mail.Send Files.Read Files.Read.All Files.ReadWrite.All User.Read API permissions can be customized by adding the id for the correct permission, as shown in the code block below: resource_access { id = \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\" # Mail.Read type = \"Scope\" }","title":"Phishing Application"},{"location":"tools/phishing_app/#full-command-line-parameters","text":"--name <DISPLAY_NAME> : Specify the display name for the application (Default: Sample App) --redirect_uri <REDIRECT_URI> : The redirect uri that the application uses to receive OAuth tokens. (Default: \"http://localhost:30662/gettoken\") --homepage_url <HOMEPAGE_URL> : The homepage URL used by the application. (Default: \"https://localhost:30662\") --logout_url <LOGOUT_URL> : The logout URL used by the application. (Default: \"https://localhost:30662/logout\")","title":"Full command line parameters"},{"location":"tools/phishing_app/#demo","text":"A video demonstration of building an application consent phishing lab with options and illustrations.","title":"Demo"},{"location":"tools/sentinel/","text":"Microsoft Sentinel lab Overview This tool generates an Azure sentinel lab with optional Windows 10 Endpoints forwarding logs to the Sentinel Log Analytics workspace. Optionally configure a Domain Controller with Domain Join. Windows 10 Azure VMs automatically install and configure the legacy Microsoft Monitoring Agent (MMA) or Operations Management Suite (OMS) and send logs to the Log Analytics workspace. The endpoints will install Sysmon by default. Note that some manual configuration steps are required for final logging configuration. Important Note: This generator lives in the generators/sentinel directory. Navigate into this directory first. cd generators/sentinel Manual Logging Configuration After creating the lab there are a couple of manual setup steps required. Step 1: Add Sysmon Channel in log analytics agents configuration Navigate into the log analytics workspace and agents configuration . Select the add windows event log . Type Microsoft-Windows-Sysmon/Operational into the Log name input field and select Apply. The following screen shot shows how the configuration should look. Microsoft-Windows-Sysmon/Operational Step 2: Enable the Sentinel Data Connector - \"Security Events via Legacy Agent\" Navigate into Sentinel. Find Data connectors under Configuration . In the search field or by scrolling below, find the connector named Security Events via Legacy Agent . Select open the connector page in the lower right hand corner. Select Common under which events to stream and Apply changes. Verify that the connector shows a green highlight and shows connected, as shown below. Step 3: Reboot Virtual Machines and Verify connected in Agents Management Verify that all Windows 10 Virtual machines show as connected. Verify this by navigating into the Log Analytics workspace and looking under Agents management under settings . Reboot each of the Azure Virtual Machines and then look to verify that they all list a connected status. It should look like the following screen shot shown below. Note: When configuring Domain Join with Active Directory, the Azure Windows 10 Professional machines will automatically reboot after joining the domain, so no manual reboot is necessary. After the Virtual Machines reboot, you can navigate into the Sentinel overview page and start to see new Sysmon and Windows security event logs in the Overview. The Sysmon logs will show under EVENT table while the security event logs will show under the SECURITYEVENT table. Usage Examples Example 1: Simple Microsoft Sentinel lab python3 sentinel.py This generates a Microsoft Sentinel lab with a Log Analytics workspace. This generates a terraform format HCL file for sentinel.tf and providers.tf . -l <LOCATION> : Specify a different location (Default: eastus) -odc : Optionally enables the Office 365 data connector for Sentinel. -adc : Optionally enables the Azure AD data connector for Sentinel. Example 2: One Windows 10 Endpoint with Sysmon installed This generates a single Windows 10 Endpoint with Sysmon installed. python3 sentinel.py --endpoint 1 All Windows 10 Pro systems will automatically send logs to Sentinel. Some small manual steps are required (listed above) to get Sysmon and Security logs properly working. Example 3: Domain Controller with Forest and Users + Windows Domain Join (Randomly Generate Users) python3 sentinel.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will automatically create an Microsoft Sentinel deployment. This will also create a Domain Controller in dc_sentinel.tf and install AD DS with forest name of rtcfingroup.com. This will create a custom local administrator account and password with 500 domain users. In this example, the domain users are randomly generated using the command line flag of --ad_users for a total of 500 users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc_sentinel.tf). For the two Windows 10 Pro endpoints, they will be configured with the Microsoft Monitoring Agent (MMA) to ship logs to Log Analytics Workspace with Microsoft Sentinel. Example 4: Domain Controller with Forest and Users + Windows Domain Join (Import Custom Users from CSV) python3 sentinel.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --csv users.csv --endpoints 2 --domain_join Description: Same capabilities as above, except it can import a custom list of Domain Users into active directory on the DC instance. The script checks to make sure that users are in the correct format. An example CSV showing five users is listed below: name,upn,password,groups,oupath,domain_admin Lars Borgerson,larsborgerson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Olivia Odinsdottir,oliviaodinsdottir@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Liem Anderson,liemanderson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False John Nilsson,johnnilsson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Jason Lindqvist,jasonlindqvist@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Details Advanced Command Line --resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --csv <csv_file> : A custom CSV file to use that will load domain users on the DC's AD DS (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false) How AD Builds on the DC Some notes I've gathered on AD usage and building. Azure AD Connect: The Azure AD connect MSI is included in ths repo. It can be upgraded by replacing the file in files/dc/AzureADConnect.msi . The current version is 2.x of AD Connect. The file is uploaded to the storage container and then downloaded to the local Administrator's desktop. The bootstrap script for building Active Directory is contained in files/dc/bootstrap-dc.ps1.tpl . This script is used to build AD DS on the dc instance created in dc.tf. After terraform runs, the actual rendered dc bootstrap script (with variables) is output to output/dc/bootstrap-dc1.ps1. For troubleshooting you can copy that script to the DC and run it. The way AD users, groups, and OUs are added: In the CSV file, there is a field for oupath . The string for the OU= is looked at and a new OU is created if it hasn't already. This is the way new OUs can be added. AD users are added to that specific OU when they are created. For adding AD Groups, the CSV field for groups is examined. The user is added into that AD group. The groups and OU= portion of the oupath should match. If they don't, problems could arise adding the user. The ad_users.csv file is the name of the file that the DC uses to build AD. It is uploaded to the storage container that is created and downloaded automatically by the DC. Look in C:\\terraform\\ad_users.csv to look at this file if needed. When using the --csv <file1> to specify your own AD users CSV, how this works: That file is copied to ad_users.csv and it is uploaded to the storage container, and downloaded to the DC. Same as above, it is copied into C:\\terraform\\ad_users.csv where the bootstrap script parses it. For auto_logon domain users: An AD domain user is randomly selected for logging on that Windows 10 Pro endpoint. To customize which domain user is used, you can manually edit the windows 10 terraform file (i.e., win10-1.tf). Edit script options in sentinel.py Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":sysmon_endpoint_config, \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. A second terraform resource is then used to manage and update any changes to your public IP address. You can hard code a different IP address in the following section of the ad.py script or the terraform nsg.tf file. If you change locations and your IP address changes, simply type terraform apply and the NSG white-listed public IP address should update through terraform. locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } Outputs: After the terraform resources are applied and build, you can type terraform output to get some important information such as the public IP address of VMs in addition to credentials for OS. Terraform Outputs You can get the details of each Virtual Machine, including passwords, by typing terraform output . Demo A video demonstration of Sentinel with options and illustrations.","title":"Microsoft Sentinel lab"},{"location":"tools/sentinel/#microsoft-sentinel-lab","text":"","title":"Microsoft Sentinel lab"},{"location":"tools/sentinel/#overview","text":"This tool generates an Azure sentinel lab with optional Windows 10 Endpoints forwarding logs to the Sentinel Log Analytics workspace. Optionally configure a Domain Controller with Domain Join. Windows 10 Azure VMs automatically install and configure the legacy Microsoft Monitoring Agent (MMA) or Operations Management Suite (OMS) and send logs to the Log Analytics workspace. The endpoints will install Sysmon by default. Note that some manual configuration steps are required for final logging configuration. Important Note: This generator lives in the generators/sentinel directory. Navigate into this directory first. cd generators/sentinel","title":"Overview"},{"location":"tools/sentinel/#manual-logging-configuration","text":"After creating the lab there are a couple of manual setup steps required.","title":"Manual Logging Configuration"},{"location":"tools/sentinel/#step-1-add-sysmon-channel-in-log-analytics-agents-configuration","text":"Navigate into the log analytics workspace and agents configuration . Select the add windows event log . Type Microsoft-Windows-Sysmon/Operational into the Log name input field and select Apply. The following screen shot shows how the configuration should look. Microsoft-Windows-Sysmon/Operational","title":"Step 1:  Add Sysmon Channel in log analytics agents configuration"},{"location":"tools/sentinel/#step-2-enable-the-sentinel-data-connector-security-events-via-legacy-agent","text":"Navigate into Sentinel. Find Data connectors under Configuration . In the search field or by scrolling below, find the connector named Security Events via Legacy Agent . Select open the connector page in the lower right hand corner. Select Common under which events to stream and Apply changes. Verify that the connector shows a green highlight and shows connected, as shown below.","title":"Step 2:  Enable the Sentinel Data Connector - \"Security Events via Legacy Agent\""},{"location":"tools/sentinel/#step-3-reboot-virtual-machines-and-verify-connected-in-agents-management","text":"Verify that all Windows 10 Virtual machines show as connected. Verify this by navigating into the Log Analytics workspace and looking under Agents management under settings . Reboot each of the Azure Virtual Machines and then look to verify that they all list a connected status. It should look like the following screen shot shown below. Note: When configuring Domain Join with Active Directory, the Azure Windows 10 Professional machines will automatically reboot after joining the domain, so no manual reboot is necessary. After the Virtual Machines reboot, you can navigate into the Sentinel overview page and start to see new Sysmon and Windows security event logs in the Overview. The Sysmon logs will show under EVENT table while the security event logs will show under the SECURITYEVENT table.","title":"Step 3:  Reboot Virtual Machines and Verify connected in Agents Management"},{"location":"tools/sentinel/#usage-examples","text":"","title":"Usage Examples"},{"location":"tools/sentinel/#example-1-simple-microsoft-sentinel-lab","text":"python3 sentinel.py This generates a Microsoft Sentinel lab with a Log Analytics workspace. This generates a terraform format HCL file for sentinel.tf and providers.tf . -l <LOCATION> : Specify a different location (Default: eastus) -odc : Optionally enables the Office 365 data connector for Sentinel. -adc : Optionally enables the Azure AD data connector for Sentinel.","title":"Example 1:  Simple Microsoft Sentinel lab"},{"location":"tools/sentinel/#example-2-one-windows-10-endpoint-with-sysmon-installed","text":"This generates a single Windows 10 Endpoint with Sysmon installed. python3 sentinel.py --endpoint 1 All Windows 10 Pro systems will automatically send logs to Sentinel. Some small manual steps are required (listed above) to get Sysmon and Security logs properly working.","title":"Example 2:  One Windows 10 Endpoint with Sysmon installed"},{"location":"tools/sentinel/#example-3-domain-controller-with-forest-and-users-windows-domain-join-randomly-generate-users","text":"python3 sentinel.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will automatically create an Microsoft Sentinel deployment. This will also create a Domain Controller in dc_sentinel.tf and install AD DS with forest name of rtcfingroup.com. This will create a custom local administrator account and password with 500 domain users. In this example, the domain users are randomly generated using the command line flag of --ad_users for a total of 500 users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc_sentinel.tf). For the two Windows 10 Pro endpoints, they will be configured with the Microsoft Monitoring Agent (MMA) to ship logs to Log Analytics Workspace with Microsoft Sentinel.","title":"Example 3: Domain Controller with Forest and Users + Windows Domain Join (Randomly Generate Users)"},{"location":"tools/sentinel/#example-4-domain-controller-with-forest-and-users-windows-domain-join-import-custom-users-from-csv","text":"python3 sentinel.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --csv users.csv --endpoints 2 --domain_join Description: Same capabilities as above, except it can import a custom list of Domain Users into active directory on the DC instance. The script checks to make sure that users are in the correct format. An example CSV showing five users is listed below: name,upn,password,groups,oupath,domain_admin Lars Borgerson,larsborgerson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Olivia Odinsdottir,oliviaodinsdottir@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True Liem Anderson,liemanderson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False John Nilsson,johnnilsson@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,False Jason Lindqvist,jasonlindqvist@rtcfingroup.com,MyPassword012345,IT,OU=IT;DC=rtcfingroup;DC=com,True","title":"Example 4: Domain Controller with Forest and Users + Windows Domain Join (Import Custom Users from CSV)"},{"location":"tools/sentinel/#details","text":"","title":"Details"},{"location":"tools/sentinel/#advanced-command-line","text":"--resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --csv <csv_file> : A custom CSV file to use that will load domain users on the DC's AD DS (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false)","title":"Advanced Command Line"},{"location":"tools/sentinel/#how-ad-builds-on-the-dc","text":"Some notes I've gathered on AD usage and building. Azure AD Connect: The Azure AD connect MSI is included in ths repo. It can be upgraded by replacing the file in files/dc/AzureADConnect.msi . The current version is 2.x of AD Connect. The file is uploaded to the storage container and then downloaded to the local Administrator's desktop. The bootstrap script for building Active Directory is contained in files/dc/bootstrap-dc.ps1.tpl . This script is used to build AD DS on the dc instance created in dc.tf. After terraform runs, the actual rendered dc bootstrap script (with variables) is output to output/dc/bootstrap-dc1.ps1. For troubleshooting you can copy that script to the DC and run it. The way AD users, groups, and OUs are added: In the CSV file, there is a field for oupath . The string for the OU= is looked at and a new OU is created if it hasn't already. This is the way new OUs can be added. AD users are added to that specific OU when they are created. For adding AD Groups, the CSV field for groups is examined. The user is added into that AD group. The groups and OU= portion of the oupath should match. If they don't, problems could arise adding the user. The ad_users.csv file is the name of the file that the DC uses to build AD. It is uploaded to the storage container that is created and downloaded automatically by the DC. Look in C:\\terraform\\ad_users.csv to look at this file if needed. When using the --csv <file1> to specify your own AD users CSV, how this works: That file is copied to ad_users.csv and it is uploaded to the storage container, and downloaded to the DC. Same as above, it is copied into C:\\terraform\\ad_users.csv where the bootstrap script parses it. For auto_logon domain users: An AD domain user is randomly selected for logging on that Windows 10 Pro endpoint. To customize which domain user is used, you can manually edit the windows 10 terraform file (i.e., win10-1.tf).","title":"How AD Builds on the DC"},{"location":"tools/sentinel/#edit-script-options-in-sentinelpy","text":"Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":sysmon_endpoint_config, \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. A second terraform resource is then used to manage and update any changes to your public IP address. You can hard code a different IP address in the following section of the ad.py script or the terraform nsg.tf file. If you change locations and your IP address changes, simply type terraform apply and the NSG white-listed public IP address should update through terraform. locals { src_ip = chomp(data.http.firewall_allowed.response_body) #src_ip = \"0.0.0.0/0\" } Outputs: After the terraform resources are applied and build, you can type terraform output to get some important information such as the public IP address of VMs in addition to credentials for OS.","title":"Edit script options in sentinel.py"},{"location":"tools/sentinel/#terraform-outputs","text":"You can get the details of each Virtual Machine, including passwords, by typing terraform output .","title":"Terraform Outputs"},{"location":"tools/sentinel/#demo","text":"A video demonstration of Sentinel with options and illustrations.","title":"Demo"},{"location":"tools/storage/","text":"Azure Storage lab Overview $ python3 storage.py -n <NAME> -l <LOCATION> Example Usage : python3 storage.py -n mystoragename -l eastus Generates a terraform format HCL file for storage.tf and providers.tf . This is a great generator for quickly creating a bunch of vulnerable cloud storage resources or studying the different security permission levels. It also builds an Azure Key Vault resources. Important Note: This generator lives in the generators/storage directory. Navigate into this directory first. cd generators/storage Resources Created Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1) Options Specify the resource group and name of resources with NAME and the Azure location wit LOCATION . -n <NAME> : Specify a resource group name and name for other resources (Default: purplecloud-sentinel) -l <LOCATION> : Specify a different location (Default: centralus) Demo A video demonstration of building a storage lab with options and illustrations.","title":"Azure Storage lab"},{"location":"tools/storage/#azure-storage-lab","text":"","title":"Azure Storage lab"},{"location":"tools/storage/#overview","text":"$ python3 storage.py -n <NAME> -l <LOCATION> Example Usage : python3 storage.py -n mystoragename -l eastus Generates a terraform format HCL file for storage.tf and providers.tf . This is a great generator for quickly creating a bunch of vulnerable cloud storage resources or studying the different security permission levels. It also builds an Azure Key Vault resources. Important Note: This generator lives in the generators/storage directory. Navigate into this directory first. cd generators/storage","title":"Overview"},{"location":"tools/storage/#resources-created","text":"Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1)","title":"Resources Created"},{"location":"tools/storage/#options","text":"Specify the resource group and name of resources with NAME and the Azure location wit LOCATION . -n <NAME> : Specify a resource group name and name for other resources (Default: purplecloud-sentinel) -l <LOCATION> : Specify a different location (Default: centralus)","title":"Options"},{"location":"tools/storage/#demo","text":"A video demonstration of building a storage lab with options and illustrations.","title":"Demo"}]}